# -*- coding: utf-8 -*-
"""test458.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k7MQM4rzMW6QNNUq0iKYAvBDISqxRAGV
"""

import streamlit as st
import pandas as pd
import pickle
import numpy as np  # Import numpy

def main():
    st.title("Salary Prediction App (Kaggle Survey 2022)")

    # 1. Load the Model
    try:
        with open("Salary2022_model.pkl", "rb") as f:  # Use the correct model file name
            model = pickle.load(f)


    # 2. Input Widgets
    st.sidebar.header("Input Features")
    age = st.sidebar.selectbox("Select Age Range",
                             ["18-21", "22-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", "60-69", "70+"])
    country = st.sidebar.selectbox("Country", ["India", "US", "Spain", "Other"])
    student_status = st.sidebar.selectbox("Are you a student?", ["Yes", "No"])
    codes_python = st.sidebar.checkbox("I code in Python")
    codes_sql = st.sidebar.checkbox("I code in SQL")
    codes_java = st.sidebar.checkbox("I code in Java")
    codes_go = st.sidebar.checkbox("I code in Go")
    years_coding = st.sidebar.slider("Years of Coding Experience", 0, 50, 2)
    education = st.sidebar.selectbox("Education", [0, 1, 2, 3, 4]) # Add education

    # 3. Process Inputs
    #  Convert age range to a numeric age (midpoint of the range)
    age_mapping = {
        "18-21": 19.5,
        "22-24": 23,
        "25-29": 27,
        "30-34": 32,
        "35-39": 37,
        "40-44": 42,
        "45-49": 47,
        "50-54": 52,
        "55-59": 57,
        "60-69": 64.5,
        "70+": 75,
    }
    age_numeric = age_mapping[age]

    # Create a DataFrame with the input data, including one-hot encoded country
    input_data = pd.DataFrame({
        'Years_Coding': [years_coding],
        'Education': [education],  # Add education
        'Country_India': [1 if country == "India" else 0],  # One-hot encode Country
        'Country_US': [1 if country == "US" else 0],
        'Country_Spain': [1 if country == "Spain" else 0],
        'Country_Other': [1 if country == "Other" else 0],
    })

    # 4. Make Prediction
    if st.button("Predict Salary"):
        try:
            prediction = model.predict(input_data)
            st.success(f"Predicted Salary: ${prediction[0]:.2f}")
        except Exception as e:
            st.error(f"Error during prediction: {e}")

if __name__ == "__main__":
    main()
